library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone, package = "ElemStatLearn")
nrow(ozone)  # 111 observations
str(ozone)
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA
,nrow = 10
,ncol = 155)
?loess0
for (i in 1:10) {
# create sample index with replacement
ss <- sample(1:dim(ozone)[1]
,replace = TRUE)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone
,data = ozone0
,span = 0.2)
ll[i,] <- predict(loess0
,newdata = data.frame(ozone = 1:155))
}
plot(ozone$ozone
,ozone$temperature
,pch = 19
,cex = 0.5)
for (i in 1:10){
lines(1:155
,ll[i,]
,col = "grey"
,lwd = 2)
}
lines(1:155
,apply(ll
,2
,mean)
,col = "red"
,lwd = 2)
library(car)  # for scatterplot
?mtcars
library(car)  # for scatterplot
install.packages("car")
library(car)  # for scatterplot
?mtcars
motor$cyl <- factor(motor$cyl
,levels = c(4, 6, 8)
,labels = c("four cyl", "six cyl", "eight cyl")
)
motor$am <- factor(motor$am
,levels = c(0, 1)
,labels = c("automatic", "manual")
)
motor <- mtcars
motor$cyl <- factor(motor$cyl
,levels = c(4, 6, 8)
,labels = c("four cyl", "six cyl", "eight cyl")
)
motor$am <- factor(motor$am
,levels = c(0, 1)
,labels = c("automatic", "manual")
)
with(motor
,boxplot(mpg ~ am
,main = "Fig 1: Transmission vs. MPG"
,ylab = "MPG"
)
)
at <- motor[motor$am == "automatic",]$mpg
mn <- motor[motor$am == "manual",]$mpg
t.test(mn
,at
)
tr <- lm(mpg ~ am
,data = motor)
round(tr$coeff[2],0)
motor <- motor[c("mpg"
,"cyl"
,"hp"
,"drat"
,"wt"
,"am"
,"gear")
]
require(stats)
require(graphics)
mycol=rainbow(3)
pairs(motor
,panel = panel.smooth
,main = "Figure 2: Motor Data Scatterplot"
,col = mycol[motor$am]
)
scatterplot(mpg ~ wt|am
,data = motor
,main = "Fig. 3: Weight vs. MPG"
,xlab = "Weight"
)
ftwt1 <- lm(mpg ~ wt + am
,data = motor)
ftwt1$coeff
fitwt <- lm(mpg ~ wt + am*wt
,data = motor)
fitwt$coeff
mycol=rainbow(3)
with(motor
,plot(wt
,mpg
,pch = 19
,col = mycol[am]
,main = "Figure 4: Regression Transmission * Weight vs. MPG"
)
)
with(motor
,plot(wt
,mpg
,pch = 19
,col = mycol[am]
,main = "Figure 4: Regression Transmission * Weight vs. MPG"
)
)
abline(fitwt$coeff[1]
,fitwt$coeff[2]
,col = "red"
,lwd = 3
)
abline(fitwt$coeff[1] + fitwt$coeff[3]
,fitwt$coeff[2] + fitwt$coeff[4]
,col = "green"
,lwd = 3
)
motor2 <- motor[c("mpg"
,"wt"
,"am")]
y <- predict(fitwt
,newdata = motor2
)
plot(y, resid(fitwt)
,main = "Figure 5: Residuals for Transmission * Weight vs. MPG"
,ylab = "Residuals")
abline(h = 0
,lwd = 3)
summary(fitwt)$r.squared
fitmotor <- lm(mpg ~ . + am:wt
,data = motor
)
fitmotor$coeff
fitmcf <- summary(fitmotor)$coefficients
fitmcf[7,1] + c(-1, 1) * qt(0.975, df = fitmotor$df) * fitmcf[7,2]
fitmcf
fitmcf[7,1]
library(lubridate)
library(car)  # for scatterplot
install.packages("lubridate")
library(lubridate)
library(car)  # for scatterplot
setwd("~/Documents/WA Intro to Data Science/kaggle")
wd
setwd("~/Documents/WA Intro to Data Science/kaggle")
bike1 <- read.csv("train.csv"
,stringsAsFactors = FALSE)
setwd("~/Documents/WA Intro to Data Science/kaggle")
setwd("~/Documents/WA Intro to Data Science/kaggle")
runGist(6571951)
library(shiny)
runGist(6571951)
pwd
pwd()
wd()
wd
q()
quit()
data(galton)
install.packages("RCurl")
install.packages("Quandl")
install.packages("Quandl")
install.packages("RCurl")
install.packages("Quandl")
library(Quandl)
quit()
install.packages('devtools')
quit()
install.packages('devtools')
install.packages("httr")
install.packages("RCurl")
install.packages("RCurl")
install.packages('devtools')
library()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='arracadas', token='25217B40960E22E1765F362C2543984C', secret='visa3OD2c2UNrKR+eJY6GvJ55WvFa2Hdwk5s0yep')
library(shinyapps)
deployApp("~/Documents/cursos/JHU Data Prods/project")
shinyapps::deployApp('~/Documents/cursos/JHU Data Prods/project')
library(shiny)
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(googleVis))
install.packages("shiny")
install.packages("ggplot2")
install.packages("googleVis")
runApp()
library(shiny)
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(googleVis))
runApp()
setwd("~/Documents/cursos/JHU Data Prods/project")
runApp()
shinyapps::deployApp('~/Documents/cursos/JHU Data Prods/project')
runApp()
runApp()
runApp()
runApp()
shinyapps::deployApp('~/Documents/cursos/JHU Data Prods/project')
quit()
